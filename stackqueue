#include <stdio.h>
#include <stdlib.h>

#define MAX 100
typedef struct {
    int data[MAX];
    int front, rear;
    int size;
} Queue;

void initQueue(Queue *q) {
    q->front = 0;
    q->rear = -1;
    q->size = 0;
}

int isEmpty(Queue *q) {
    return q->size == 0;
}

int isFull(Queue *q) {
    return q->size == MAX;
}

void enqueue(Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue Overflow\n");
        return;
    }
    q->rear = (q->rear + 1) % MAX;
    q->data[q->rear] = value;
    q->size++;
}

int dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->data[q->front];
    q->front = (q->front + 1) % MAX;
    q->size--;
    return value;
}

int front(Queue *q) {
    if (isEmpty(q)) return -1;
    return q->data[q->front];
}

// Stack using Queue
typedef struct {
    Queue q;
} Stack;

void initStack(Stack *s) {
    initQueue(&(s->q));
}

void push(Stack *s, int x) {
    enqueue(&(s->q), x);
    for (int i = 0; i < s->q.size - 1; i++) {
        enqueue(&(s->q), dequeue(&(s->q)));
    }
}

int pop(Stack *s) {
    if (isEmpty(&(s->q))) {
        printf("Stack Underflow\n");
        return -1;
    }
    return dequeue(&(s->q));
}

int top(Stack *s) {
    return front(&(s->q));
}

int isStackEmpty(Stack *s) {
    return isEmpty(&(s->q));
}

int main() {
    Stack s;
    initStack(&s);

    push(&s, 10);
    push(&s, 20);
    push(&s, 30);

    printf("Popped: %d\n", pop(&s));      
    printf("Top element: %d\n", top(&s));  
    push(&s, 40);
    printf("Top element: %d\n", top(&s)); 

    return 0;
}
